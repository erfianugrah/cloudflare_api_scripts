---
title: "How to Identify Performance Bottlenecks <br> and Solving Them with the Ruleset Engine" 
author: "Erfi Anugrah" 
format:
  revealjs:
    width: 1600
    height: 900
    margin: 0.1
    progress: true
    history: true
    theme: dark
    slide-number: true
    show-slide-number: print
    preview-links: auto
    code-block-height: 800px
    chalkboard:
      theme: whiteboard
      boardmarker-width: 5
    mermaid:
      theme: forest
---

## Overview {.larger}

**What we'll cover:**

<style>
.mermaid-container {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 90%;
}
.reveal .slide-number {
  font-size: 20px;
}
.reveal .slides {
  font-size: 30px;
}
.smaller {
  font-size: 24px;
}

#mermaid-1 {
  width: 2000px;
}

#mermaid-2 {
  width: 1800px;
}
#mermaid-3 {
  width: 1800px;
}
#mermaid-4 {
  width: 1800px;
}
#mermaid-5 {
  width: 1800px;
}
</style>

<div class="mermaid-container">
```{mermaid}
%%{init: {
  'theme': 'dark',
  'themeVariables': {
    'primaryColor': '#ff9800',
    'primaryTextColor': '#fff',
    'primaryBorderColor': '#fff',
    'lineColor': '#fff',
    'secondaryColor': '#006064',
    'tertiaryColor': '#4caf50',
    'mainBkg': '#2d3436',
    'nodeBorder': '#ff9800',
    'clusterBkg': '#2d3436',
    'clusterBorder': '#ff9800'
  }
}}%%
graph TB
    Start[Key Performance Metrics] --> Bottlenecks[Common Bottlenecks]
    Bottlenecks --> Analysis[Analysis Methodology]
    Analysis --> Data[GraphQL Data Collection]
    Data --> Troubleshoot[Troubleshooting Workflow]
    Troubleshoot --> Solution[Implementation Solutions]
    
    classDef orange fill:#ff9800,stroke:#fff,stroke-width:2px,color:#fff;
    classDef blue fill:#006064,stroke:#fff,stroke-width:2px,color:#fff;
    classDef green fill:#4caf50,stroke:#fff,stroke-width:2px,color:#fff;

    class Start,Bottlenecks orange;
    class Analysis,Data blue;
    class Troubleshoot,Solution green;
```
</div>

---

## Key Performance Metrics

<div class="mermaid-container">
```{mermaid}
%%{init: {
  'theme': 'dark',
  'themeVariables': {
    'primaryColor': '#ff9800',
    'primaryTextColor': '#fff',
    'primaryBorderColor': '#fff',
    'lineColor': '#fff',
    'secondaryColor': '#006064',
    'tertiaryColor': '#4caf50',
    'mainBkg': '#2d3436',
    'nodeBorder': '#ff9800',
    'clusterBkg': '#2d3436',
    'clusterBorder': '#ff9800'
  }
}}%%
graph LR
    Performance[Performance Metrics]
    Performance --> Response[Response Times]
    Performance --> Geographic[Geographic Distribution]
    Performance --> Resource[Resource Utilization]

    Response --> TTFB[Edge TTFB]
    Response --> Origin[Origin Response Time]
    Response --> Cache[Cache Performance]

    Geographic --> Latency[Regional Latency]
    Geographic --> Efficiency[Cache Efficiency]
    Geographic --> Errors[Error Distribution]

    Resource --> Load[Origin Load]
    Resource --> Bottlenecks[Application Bottlenecks]

    classDef orange fill:#ff9800,stroke:#fff,stroke-width:2px,color:#fff;
    class Performance,Response,Geographic,Resource orange;
    class TTFB,Origin,Cache,Latency,Efficiency,Errors,Load,Bottlenecks orange;
```
</div>

---

## Common Performance Bottlenecks 

<div class="mermaid-container">
```{mermaid}
%%{init: {
  'theme': 'dark',
  'themeVariables': {
    'primaryColor': '#ff9800',
    'primaryTextColor': '#fff',
    'primaryBorderColor': '#fff',
    'lineColor': '#fff',
    'secondaryColor': '#006064',
    'tertiaryColor': '#4caf50',
    'mainBkg': '#2d3436',
    'nodeBorder': '#ff9800',
    'clusterBkg': '#2d3436',
    'clusterBorder': '#ff9800'
  }
}}%%
graph TD
    Bottlenecks[Performance Bottlenecks]
    Bottlenecks --> Cache[Cache Issues]
    Bottlenecks --> Network[Network Problems]
    Bottlenecks --> Origin[Origin Issues]

    Cache --> HitRatio[Low Cache Hit Ratios]
    Cache --> TTL[Ineffective/Low TTLs]
    Cache --> Rules[Missing Cache Rules]
    Cache --> Design[Poor Cache Key Design]

    Network --> Latency[High Origin Latency]
    Network --> Routing[Poor Routing Paths]
    Network --> Connectivity[Regional Connectivity]
    Network --> Limits[Connection Limits]

    Origin --> Overload[Server Overload]
    Origin --> Database[Database Bottlenecks]
    Origin --> Resources[Resource Exhaustion]
    Origin --> Timeouts[Timeout Configuration]

    classDef orange fill:#ff9800,stroke:#fff,stroke-width:2px,color:#fff;
    class Bottlenecks orange;
    class Cache,Network,Origin orange;
    class HitRatio,TTL,Rules,Design,Latency,Routing,Connectivity,Limits,Overload,Database,Resources,Timeouts orange;
```
</div>


---

## Analysis Workflow

<div class="mermaid-container">
```{mermaid}
%%{init: {
  'theme': 'dark',
  'themeVariables': {
    'primaryColor': '#ff9800',
    'primaryTextColor': '#fff',
    'primaryBorderColor': '#fff',
    'lineColor': '#fff',
    'secondaryColor': '#006064',
    'tertiaryColor': '#4caf50',
    'mainBkg': '#2d3436',
    'nodeBorder': '#ff9800',
    'clusterBkg': '#2d3436',
    'clusterBorder': '#ff9800'
  }
}}%%
graph TB
    Start[Performance Issue] --> Identify{Identify Problem Type}
    Identify --> Cache[Cache Analysis]
    Identify --> Network[Network Analysis]
    Identify --> Origin[Origin Analysis]
    
    Cache --> CacheMetrics[Cache Metrics]
    Cache --> HitRatio[Hit Ratio]
    Cache --> CacheRules[Cache Rules]
    
    Network --> Latency[Latency Analysis]
    Network --> Routes[Route Analysis]
    Network --> Geo[Geographic Distribution]
    
    Origin --> Server[Server Metrics]
    Origin --> Database[Database Servers]
    Origin --> Application[Application Servers]
    
    CacheMetrics --> Solution{Solution}
    HitRatio --> Solution
    CacheRules --> Solution
    Latency --> Solution
    Geo --> Solution
    Routes --> Solution
    Server --> Solution
    Database --> Solution
    Application --> Solution

    classDef orange fill:#ff9800,stroke:#fff,stroke-width:2px,color:#fff;
    classDef blue fill:#006064,stroke:#fff,stroke-width:2px,color:#fff;
    classDef green fill:#4caf50,stroke:#fff,stroke-width:2px,color:#fff;

    class Start,Identify,Solution orange;
    class Cache,Network,Origin blue;
    class CacheMetrics,HitRatio,CacheRules,Latency,Routes,SSL,Server,Database,Application,Geo green;
```
</div>

---

## Initial Investigation Steps {.smaller}

### 1. Baseline Metrics
- Current cache hit ratio
- Average response times
- Quantiles for response times
- Error rate patterns
- Geographic distribution
- Resource utilization

### 2. Impact Assessment
- Affected regions
- User experience impact
- Origin load
- Bandwidth implications

### 3. Root Cause Analysis
- Timeline correlation
- Configuration review
- Log analysis
- Performance profiling

---

## GraphQL Demo {.center}

- Performance analysis walkthrough
- Common issue resolution
- Implementation guidance

## GraphQL Performance Analysis {.scrollable} 

```graphql
query ZoneMetricsBasic($zoneTag: String!, $filter: ZoneHttpRequestsAdaptiveGroupsFilter!) {
  viewer {
    zones(filter: { zoneTag: $zoneTag }) {
      httpRequestsAdaptiveGroups(
        limit: 5000
        filter: $filter
        orderBy: [datetimeMinute_DESC]
      ) {
        dimensions {
          datetimeMinute
          clientCountryName
          clientDeviceType
          clientRequestHTTPProtocol
          edgeResponseContentTypeName
          edgeResponseStatus
          cacheStatus
          coloCode
          upperTierColoName
        }
        avg {
          sampleInterval
          edgeTimeToFirstByteMs
          originResponseDurationMs
        }
        sum {
          visits
          edgeResponseBytes
        }
        count
        ratio {
          status4xx
          status5xx
        }
      }
    }
  }
}
```

<br>

```graphql
query ZoneMetricsDetailed($zoneTag: String!, $filter: ZoneHttpRequestsAdaptiveGroupsFilter!) {
  viewer {
    zones(filter: { zoneTag: $zoneTag }) {
      httpRequestsAdaptiveGroups(
        limit: 5000
        filter: $filter
        orderBy: [datetimeMinute_DESC]
      ) {
        dimensions {
          datetimeMinute
          clientAsn
          clientIP
          clientRefererHost
          clientRequestHTTPHost
          clientRequestPath
          clientRequestHTTPMethodName
        }
        quantiles {
          edgeTimeToFirstByteMsP50
          edgeTimeToFirstByteMsP95
          edgeTimeToFirstByteMsP99
          originResponseDurationMsP50
          originResponseDurationMsP95
          originResponseDurationMsP99
        }
        sum {
          edgeTimeToFirstByteMs
          originResponseDurationMs
        }
      }
    }
  }
}
```

<br>

::: aside
Be aware for Cloudflare's GraphQL API [limits](https://developers.cloudflare.com/analytics/graphql-api/limits/)
:::

---

## Ruleset Engine with Terraform {.center}

- Dashboard demo into rule building
- Implementation guidance

## Cache Optimization Solutions {.scrollable}

#### 1. Static Content Caching

```hcl
resource "cloudflare_ruleset" "static_cache" {
  zone_id = var.zone_id
  name    = "Static Content Optimization"
  phase   = "http_request_cache_settings"

  rules {
    action = "set_cache_settings"
    action_parameters {
      cache = true
      edge_ttl {
        default = 31536000  # 1 year
        mode    = "override_origin"
      }
      browser_ttl {
        default = 86400    # 1 day
        mode    = "override_origin"
      }
      cache_key {
        custom_key {
          query_string {
            exclude = ["*"]  # Ignore all query params
          }
        }
      }
    }
    expression = "(http.request.uri.path matches \"\\.(jpg|jpeg|gif|png|ico|css|js|svg|woff2)$\")"
  }
}
```
<br>

#### 2. API Response Caching
```hcl
resource "cloudflare_ruleset" "api_cache" {
  zone_id = var.zone_id
  name    = "API Cache"
  phase   = "http_request_cache_settings"

  rules {
    action = "set_cache_settings"
    action_parameters {
      cache = true
      cache_key {
        custom_key {
          header {
            include = ["Authorization"]
          }
          query_string {
            include = ["version", "locale"]
          }
        }
      }
      edge_ttl {
        default = 300  # 5 minutes
        mode    = "respect_origin"
      }
      serve_stale {
        disable_stale_while_updating = false
      }
    }
    expression = "(http.host eq \"api.example.com\" and http.request.uri.path contains \"/v1/\")"
  }
}
```

---

## Network Optimization {.scrollable}

#### 1. Argo Smart Routing
```hcl
resource "cloudflare_argo" "argo" {
  zone_id        = var.cloudflare_zone_id
  smart_routing  = "on"
}
```
<br>

#### 2. Tiered Cache
```hcl
resource "cloudflare_tiered_cache" "tc" {
  zone_id        = var.cloudflare_zone_id
  cache_type     = "smart"
}

resource "cloudflare_regional_tiered_cache" "regional_tc" {
  zone_id        = var.cloudflare_zone_id
  value          = "on"
}
```

<br>

#### 3. Load Balancing
```hcl
resource "cloudflare_load_balancer" "revista" {
  default_pool_ids = [cloudflare_load_balancer_pool.revista_k3s_nl.id,  cloudflare_load_balancer_pool.revista_ipsec_k3s_nl.id]
  enabled          = true
  fallback_pool_id = cloudflare_load_balancer_pool.revista_sg.id
  name             = var.domain_name
  proxied          = true
  session_affinity = "none"
  steering_policy  = "geo"
  zone_id          = var.cloudflare_zone_id
  pop_pools {
    pop      = "AMS"
    pool_ids = [cloudflare_load_balancer_pool.revista_k3s_nl.id, cloudflare_load_balancer_pool.revista_ipsec_k3s_nl.id]
  }
  pop_pools {
    pop      = "SIN"
    pool_ids = [cloudflare_load_balancer_pool.revista_sg.id]
  }
  adaptive_routing {
    failover_across_pools = true
  }
  location_strategy {
    mode       = "pop"
    prefer_ecs = "proximity"
  }
  random_steering {
    default_weight = 1
  }
  session_affinity_attributes {
    samesite               = "Auto"
    secure                 = "Auto"
    zero_downtime_failover = "temporary"
  }
}
```

<br>

#### 4. Regional Cache Configuration
```hcl
resource "cloudflare_ruleset" "regional_cache" {
  zone_id = var.zone_id
  name    = "Regional Cache Settings"
  phase   = "http_request_cache_settings"

  rules {
    action = "set_cache_settings"
    action_parameters {
      cache = true
      cache_key {
        custom_key {
          user {
            geo = true
            device_type = true
          }
        }
      }
      edge_ttl {
        default = 3600
        mode    = "override_origin"
      }
    }
    expression = "(ip.src.country in {\"US\" \"CA\" \"GB\"} and http.request.uri.path contains \"/content/\")"
  }
}
```

---

## Things to look out for {.smaller}

<div class="mermaid-container">
```{mermaid}
%%{init: {
  'theme': 'dark',
  'themeVariables': {
    'primaryColor': '#ff9800',
    'primaryTextColor': '#fff',
    'primaryBorderColor': '#fff',
    'lineColor': '#fff',
    'secondaryColor': '#006064',
    'tertiaryColor': '#4caf50',
    'mainBkg': '#2d3436',
    'nodeBorder': '#ff9800',
    'clusterBkg': '#2d3436',
    'clusterBorder': '#ff9800'
  }
}}%%
graph TD
    Solutions[Optimization Solutions]
    Solutions --> CacheOptim[Cache Optimization]
    Solutions --> NetworkOptim[Network Optimization]
    Solutions --> OriginOptim[Origin Optimization]

    CacheOptim --> TTL[Appropriate TTLs]
    CacheOptim --> Keys[Custom Cache Keys]
    CacheOptim --> Tiered[Tiered Caching]

    NetworkOptim --> Argo[Argo Smart Routing]
    NetworkOptim --> Load[Load Balancing]
    NetworkOptim --> Latency[Latency Monitoring]

    OriginOptim --> Errors[Error Handling]
    OriginOptim --> Monitoring[Service Monitoring]
    OriginOptim --> Stale[Serve Stale Content]

    classDef orange fill:#ff9800,stroke:#fff,stroke-width:2px,color:#fff;
    class Solutions orange;
    class CacheOptim,NetworkOptim,OriginOptim blue;
    class TTL,Keys,Tiered,Argo,Load,Latency,Errors,Monitoring,Stale green;
```
</div>

## Survey {.center}

<div style="text-align: center;">
  <img src="./survey.png" style="width: 50%;" />
</div>
